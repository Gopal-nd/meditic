// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  role                Role @default(PATIENT)
  username String? @unique

  image       String?
  accounts    Account[]
  sessions    Session[]
  // One-to-One relation to patient details
  patientDetails PatientDetails[]

  Appointment Appointment[]
}

model PatientDetails {
  id             String   @id @default(cuid())
  email         String   
  gender         String
  dateOfBirth    DateTime?
  age            Int?
  medicalHistory String?
  
  user           User     @relation(fields: [email], references: [email], onDelete: Cascade)
}


model Appointment {
  id String @id @default(cuid())
    email        String   // Foreign key to User (Patient)
  patient          User     @relation(fields: [email], references: [email], onDelete: Cascade)
  specialization   String   // The specialization chosen, e.g., 'Cardiology'
  problem          String   // Patient's reason for booking the appointment
  appointmentTime  DateTime // The date and time of the appointment
  createdAt        DateTime @default(now()) // Auto-generated creation timestamp
  status           AppointmentStatus @default(PENDING) // Status of the appointment
  
  @@index([email])
}

enum AppointmentStatus {
  PENDING  // Appointment created but not yet approved
  ACCEPTED // Appointment has been accepted
  REJ
}


enum Role {
  PATIENT  // Appointment created but not yet approved
  DOCTER // Appointment has been accepted
  
}